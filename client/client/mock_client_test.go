// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Rmarken5/file-client/file-manager (interfaces: FileManager)

// Package main_test is a generated GoMock package.
package client_test

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFileManager is a mock of FileManager interface.
type MockFileManager struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerMockRecorder
}

// MockFileManagerMockRecorder is the mock recorder for MockFileManager.
type MockFileManagerMockRecorder struct {
	mock *MockFileManager
}

// NewMockFileManager creates a new mock instance.
func NewMockFileManager(ctrl *gomock.Controller) *MockFileManager {
	mock := &MockFileManager{ctrl: ctrl}
	mock.recorder = &MockFileManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManager) EXPECT() *MockFileManagerMockRecorder {
	return m.recorder
}

// AddFileToDownloadedList mocks base method.
func (m *MockFileManager) AddFileToDownloadedList(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddFileToDownloadedList", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddFileToDownloadedList indicates an expected call of AddFileToDownloadedList.
func (mr *MockFileManagerMockRecorder) AddFileToDownloadedList(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToDownloadedList", reflect.TypeOf((*MockFileManager)(nil).AddFileToDownloadedList), arg0)
}

// AddFileToQueue mocks base method.
func (m *MockFileManager) AddFileToQueue(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddFileToQueue", arg0)
}

// AddFileToQueue indicates an expected call of AddFileToQueue.
func (mr *MockFileManagerMockRecorder) AddFileToQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddFileToQueue", reflect.TypeOf((*MockFileManager)(nil).AddFileToQueue), arg0)
}

// DownloadFile mocks base method.
func (m *MockFileManager) DownloadFile(arg0 *net.Conn, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadFile", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DownloadFile indicates an expected call of DownloadFile.
func (mr *MockFileManagerMockRecorder) DownloadFile(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFile", reflect.TypeOf((*MockFileManager)(nil).DownloadFile), arg0, arg1)
}

// RemoveFileFromQueue mocks base method.
func (m *MockFileManager) RemoveFileFromQueue(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RemoveFileFromQueue", arg0)
}

// RemoveFileFromQueue indicates an expected call of RemoveFileFromQueue.
func (mr *MockFileManagerMockRecorder) RemoveFileFromQueue(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFileFromQueue", reflect.TypeOf((*MockFileManager)(nil).RemoveFileFromQueue), arg0)
}

// WriteFileHashToDB mocks base method.
func (m *MockFileManager) WriteFileNameToDatabase(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteFileHashToDB", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteFileHashToDB indicates an expected call of WriteFileHashToDB.
func (mr *MockFileManagerMockRecorder) WriteFileNameToDatabase(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteFileHashToDB", reflect.TypeOf((*MockFileManager)(nil).WriteFileNameToDatabase), arg0)
}
