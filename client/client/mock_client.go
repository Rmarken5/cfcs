// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/rmarken5/cfcs/client/client (interfaces: Client)

// Package client is a generated GoMock package.
package client

import (
	net "net"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// ConnectToServer mocks base method.
func (m *MockClient) ConnectToServer(arg0 string) (*net.TCPConn, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConnectToServer", arg0)
	ret0, _ := ret[0].(*net.TCPConn)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConnectToServer indicates an expected call of ConnectToServer.
func (mr *MockClientMockRecorder) ConnectToServer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConnectToServer", reflect.TypeOf((*MockClient)(nil).ConnectToServer), arg0)
}

// DownloadFiles mocks base method.
func (m *MockClient) DownloadFiles() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "DownloadFiles")
}

// DownloadFiles indicates an expected call of DownloadFiles.
func (mr *MockClientMockRecorder) DownloadFiles() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadFiles", reflect.TypeOf((*MockClient)(nil).DownloadFiles))
}

// FileChannel mocks base method.
func (m *MockClient) FileChannel() *chan string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FileChannel")
	ret0, _ := ret[0].(*chan string)
	return ret0
}

// FileChannel indicates an expected call of FileChannel.
func (mr *MockClientMockRecorder) FileChannel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FileChannel", reflect.TypeOf((*MockClient)(nil).FileChannel))
}

// ListenForFiles mocks base method.
func (m *MockClient) ListenForFiles(arg0 *net.TCPConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListenForFiles", arg0)
}

// ListenForFiles indicates an expected call of ListenForFiles.
func (mr *MockClientMockRecorder) ListenForFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListenForFiles", reflect.TypeOf((*MockClient)(nil).ListenForFiles), arg0)
}

// ManageServerResponses mocks base method.
func (m *MockClient) ManageServerResponses(arg0 *net.TCPConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ManageServerResponses", arg0)
}

// ManageServerResponses indicates an expected call of ManageServerResponses.
func (mr *MockClientMockRecorder) ManageServerResponses(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ManageServerResponses", reflect.TypeOf((*MockClient)(nil).ManageServerResponses), arg0)
}

// RequestAllFileNames mocks base method.
func (m *MockClient) RequestAllFileNames(arg0 *net.TCPConn) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RequestAllFileNames", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RequestAllFileNames indicates an expected call of RequestAllFileNames.
func (mr *MockClientMockRecorder) RequestAllFileNames(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestAllFileNames", reflect.TypeOf((*MockClient)(nil).RequestAllFileNames), arg0)
}

// RequestFiles mocks base method.
func (m *MockClient) RequestFiles(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RequestFiles", arg0)
}

// RequestFiles indicates an expected call of RequestFiles.
func (mr *MockClientMockRecorder) RequestFiles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RequestFiles", reflect.TypeOf((*MockClient)(nil).RequestFiles), arg0)
}

// WriteComplete mocks base method.
func (m *MockClient) WriteComplete(arg0 *net.TCPConn) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "WriteComplete", arg0)
}

// WriteComplete indicates an expected call of WriteComplete.
func (mr *MockClientMockRecorder) WriteComplete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteComplete", reflect.TypeOf((*MockClient)(nil).WriteComplete), arg0)
}
